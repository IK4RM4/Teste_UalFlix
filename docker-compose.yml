version: "3.9"

services:
  # MongoDB Primary
  ualflix_db_primary:
    image: mongo:5.0
    container_name: ualflix_db_primary
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
    volumes:
      - mongo_primary_data:/data/db
      - ./init_replica.js:/docker-entrypoint-initdb.d/init_replica.js
    command: ["mongod", "--replSet", "ualflix-replica-set", "--bind_ip_all"]
    networks:
      - ualflix_net

  # MongoDB Secondary
  ualflix_db_secondary:
    image: mongo:5.0
    container_name: ualflix_db_secondary
    ports:
      - "27018:27018"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
    volumes:
      - mongo_secondary_data:/data/db
    command: ["mongod", "--replSet", "ualflix-replica-set", "--bind_ip_all"]
    networks:
      - ualflix_net

  # MongoDB Arbiter
  ualflix_db_arbiter:
    image: mongo:5.0
    container_name: ualflix_db_arbiter
    ports:
      - "27019:27019"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
    command: ["mongod", "--replSet", "ualflix-replica-set", "--bind_ip_all"]
    networks:
      - ualflix_net

  # Replica Set Initializer
  mongo_rs_initiator:
    image: mongo:5.0
    depends_on:
      - ualflix_db_primary
      - ualflix_db_secondary
      - ualflix_db_arbiter
    entrypoint: >
      bash -c '
      sleep 10;
      echo "ðŸŒ€ Iniciando Replica Set...";
      mongo --host ualflix_db_primary:27017 --eval "
        rs.initiate({
          _id: 'ualflix-replica-set',
          members: [
            { _id: 0, host: 'ualflix_db_primary:27017' },
            { _id: 1, host: 'ualflix_db_secondary:27018' },
            { _id: 2, host: 'ualflix_db_arbiter:27019', arbiterOnly: true }
          ]
        });
      ";
      '
    networks:
      - ualflix_net

  # RabbitMQ
  queue_service:
    image: rabbitmq:3-management
    container_name: queue_service
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=ualflix
      - RABBITMQ_DEFAULT_PASS=ualflix_password
    networks:
      - ualflix_net

  # Catalog Service
  catalog_service:
    build:
      context: ./catalog_service
    container_name: catalog_service
    ports:
      - "8001:8000"
    environment:
      - MONGO_URI=mongodb://admin:password@ualflix_db_primary:27017,ualflix_db_secondary:27018/?replicaSet=ualflix-replica-set&authSource=admin
      - QUEUE_HOST=queue_service
      - QUEUE_USER=ualflix
      - QUEUE_PASSWORD=ualflix_password
      - AUTH_SERVICE_URL=http://authentication_service:8000
    volumes:
      - ./catalog_service/uploads:/videos
    depends_on:
      - ualflix_db_primary
      - queue_service
    networks:
      - ualflix_net

  # Authentication Service
  authentication_service:
    build:
      context: ./authentication_service
    container_name: authentication_service
    ports:
      - "8000:8000"
    environment:
      - MONGO_URI=mongodb://admin:password@ualflix_db_primary:27017,ualflix_db_secondary:27018/?replicaSet=ualflix-replica-set&authSource=admin
    depends_on:
      - ualflix_db_primary
    networks:
      - ualflix_net

  # Frontend (React ou outro)
  frontend:
    build:
      context: ./frontend
    container_name: frontend
    ports:
      - "8080:80"
    depends_on:
      - catalog_service
    networks:
      - ualflix_net

networks:
  ualflix_net:

volumes:
  mongo_primary_data:
  mongo_secondary_data:
