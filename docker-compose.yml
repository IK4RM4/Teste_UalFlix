services:
  # MongoDB Primary
  ualflix_db_primary:
    image: mongo:5.0
    container_name: ualflix_db_primary
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
    volumes:
      - mongo_primary_data:/data/db
      - ./init_replica.js:/docker-entrypoint-initdb.d/init_replica.js
      - ./mongodb-keyfile:/etc/mongodb-keyfile:ro
    command: ["mongod", "--replSet", "ualflix-replica-set", "--bind_ip_all", "--keyFile", "/etc/mongodb-keyfile"]
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 40s
    networks:
      - ualflix_net

  # MongoDB Secondary
  ualflix_db_secondary:
    image: mongo:5.0
    container_name: ualflix_db_secondary
    ports:
      - "27018:27018"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
    volumes:
      - mongo_secondary_data:/data/db
      - ./mongodb-keyfile:/etc/mongodb-keyfile:ro
    command: ["mongod", "--replSet", "ualflix-replica-set", "--bind_ip_all", "--keyFile", "/etc/mongodb-keyfile"]
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 40s
    networks:
      - ualflix_net

  # MongoDB Arbiter
  ualflix_db_arbiter:
    image: mongo:5.0
    container_name: ualflix_db_arbiter
    ports:
      - "27019:27019"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
    volumes:
      - ./mongodb-keyfile:/etc/mongodb-keyfile:ro
    command: ["mongod", "--replSet", "ualflix-replica-set", "--bind_ip_all", "--keyFile", "/etc/mongodb-keyfile"]
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 40s
    networks:
      - ualflix_net

  # Replica Set Initializer
  mongo_rs_initiator:
    image: mongo:5.0
    depends_on:
      ualflix_db_primary:
        condition: service_healthy
      ualflix_db_secondary:
        condition: service_healthy
      ualflix_db_arbiter:
        condition: service_healthy
    entrypoint: >
      bash -c '
      sleep 30;
      echo "üåÄ Iniciando Replica Set...";
      mongosh --host ualflix_db_primary:27017 --eval "
        rs.initiate({
          _id: '\''ualflix-replica-set'\'',
          members: [
            { _id: 0, host: '\''ualflix_db_primary:27017'\'' },
            { _id: 1, host: '\''ualflix_db_secondary:27018'\'' },
            { _id: 2, host: '\''ualflix_db_arbiter:27019'\'', arbiterOnly: true }
          ]
        });
      ";
      sleep 10;
      echo "üîê Configurando autentica√ß√£o...";
      mongosh --host ualflix_db_primary:27017 --eval "
        db.getSiblingDB('\''admin'\'').createUser({
          user: '\''admin'\'',
          pwd: '\''password'\'',
          roles: [ { role: '\''root'\'', db: '\''admin'\'' } ]
        });
      ";
      '
    networks:
      - ualflix_net

  # RabbitMQ
  queue_service:
    image: rabbitmq:3-management
    container_name: queue_service
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=ualflix
      - RABBITMQ_DEFAULT_PASS=ualflix_password
    networks:
      - ualflix_net

  # Catalog Service
  catalog_service:
    build:
      context: ./catalog_service
    container_name: catalog_service
    ports:
      - "8001:8000"
    environment:
      - MONGO_URI=mongodb://admin:password@ualflix_db_primary:27017,ualflix_db_secondary:27018/?replicaSet=ualflix-replica-set&authSource=admin
      - QUEUE_HOST=queue_service
      - QUEUE_USER=ualflix
      - QUEUE_PASSWORD=ualflix_password
      - AUTH_SERVICE_URL=http://authentication_service:8000
    volumes:
      - ./catalog_service/uploads:/videos
    depends_on:
      - ualflix_db_primary
      - queue_service
    networks:
      - ualflix_net

  # Authentication Service
  authentication_service:
    build:
      context: ./authentication_service
    container_name: authentication_service
    ports:
      - "8000:8000"
    environment:
      - MONGO_URI=mongodb://admin:password@ualflix_db_primary:27017,ualflix_db_secondary:27018/?replicaSet=ualflix-replica-set&authSource=admin
    depends_on:
      - ualflix_db_primary
    networks:
      - ualflix_net

  # Admin Service
  admin_service:
    build:
      context: ./admin_service
    container_name: admin_service
    ports:
      - "8002:8000"
    environment:
      - MONGO_URI=mongodb://admin:password@ualflix_db_primary:27017,ualflix_db_secondary:27018/?replicaSet=ualflix-replica-set&authSource=admin
      - AUTH_SERVICE_URL=http://authentication_service:8000
    depends_on:
      - ualflix_db_primary
      - authentication_service
    networks:
      - ualflix_net

  # Streaming Service
  streaming_service:
    build:
      context: ./streaming_service
    container_name: streaming_service
    ports:
      - "8003:8000"
    environment:
      - MONGO_URI=mongodb://admin:password@ualflix_db_primary:27017,ualflix_db_secondary:27018/?replicaSet=ualflix-replica-set&authSource=admin
      - QUEUE_HOST=queue_service
      - QUEUE_USER=ualflix
      - QUEUE_PASSWORD=ualflix_password
    volumes:
      - ./video_data:/videos
    depends_on:
      - ualflix_db_primary
      - queue_service
    networks:
      - ualflix_net

  # Video Processor
  video_processor:
    build:
      context: ./video_processor
    container_name: video_processor
    environment:
      - MONGO_URI=mongodb://admin:password@ualflix_db_primary:27017,ualflix_db_secondary:27018/?replicaSet=ualflix-replica-set&authSource=admin
      - QUEUE_HOST=queue_service
      - QUEUE_USER=ualflix
      - QUEUE_PASSWORD=ualflix_password
    volumes:
      - ./video_data:/videos
    depends_on:
      - ualflix_db_primary
      - queue_service
    networks:
      - ualflix_net

  # Frontend
  frontend:
    build:
      context: ./frontend
    container_name: frontend
    ports:
      - "8080:80"
    depends_on:
      - catalog_service
      - authentication_service
      - admin_service
      - streaming_service
    networks:
      - ualflix_net

  # Nginx
  nginx:
    image: nginx:latest
    container_name: nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - catalog_service
      - authentication_service
      - admin_service
      - streaming_service
    networks:
      - ualflix_net

  # HAProxy
  haproxy:
    image: haproxy:latest
    container_name: haproxy
    ports:
      - "8404:8404"  # Stats page
      - "8405:8405"  # Admin interface
    volumes:
      - ./haproxy/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro
    depends_on:
      - nginx
    networks:
      - ualflix_net

networks:
  ualflix_net:

volumes:
  mongo_primary_data:
  mongo_secondary_data:
